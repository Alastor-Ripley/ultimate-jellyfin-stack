version: "3.0"

networks:
  proxy:
    external: true
  jellyfin_default:
    external: true
  starr:
    external: true
      
services:
  # REVERSE PROXY IS IN OTHER DOCKER COMPOSE STACK

  #Jellyfin - used to display the media
  #This can also be replaced by Emby/Plex
  jellyfin:
    image: ghcr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_URL}
      - PUID=${PUID}
      - PGID=${PGID}
    ports:
      - 8096:8096
      - 8920:8920
    devices:
     - /dev/dri:/dev/dri #Required for jellyfin HW transcoding / QuickSync
    volumes:
      - ${BASE_PATH}/jellyfin/config:/config
      - ${MEDIA_SHARE}/media:/media
      - ${BASE_PATH}/swag/config/keys/letsencrypt:/certificates
    restart: unless-stopped
    networks:
      - proxy
      - starr
    
  #Radarr - used to find movies automatically
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/radarr/config:/config
      - ${MEDIA_SHARE}:/data #Access to the entire /share
    ports:
      - 7878:7878
    networks:
      - proxy
      - starr
    restart: unless-stopped
    
  #Sonarr - used to find shows automatically
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/sonarr/config:/config
      - ${MEDIA_SHARE}:/data #Access to the entire /share
    ports:
      - 8989:8989
    networks:
      - proxy
      - starr
    restart: unless-stopped
  
  #Readarr - Used to download books
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/readarr/config:/config
      - ${MEDIA_SHARE}:/data 
    ports:
      - 8787:8787
    networks:
      - proxy
      - starr
    restart: unless-stopped
    
  #Lidarr - Used to download music 
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/lidarr/config:/config
      - ${MEDIA_SHARE}:/data
    ports:
      - 8686:8686
    networks:
      - proxy
      - starr
    restart: unless-stopped

  #Kapowarr - Used to download comics
  kapowarr:
    image: 'mrcas/kapowarr:latest'
    container_name: kapowarr
    network_mode: "service:gluetun"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/kapowarr/config:/app/db
      - ${MEDIA_SHARE}/temp_downloads:/app/temp_downloads
      - ${MEDIA_SHARE}:/data
    restart: unless-stopped
    
  #Prowlarr - manages your Sonarr, Radarr and download client
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/prowlarr/config:/config
    ports:
      - 9696:9696
    networks:
      - proxy
      - starr
    restart: unless-stopped
    
  #Autobrr - used to grab torrents using the trackers IRC channel - Increases seeding due to grabbing content before RSS feed
  autobrr:
    container_name: autobrr
    image: ghcr.io/autobrr/autobrr:latest
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${BASE_PATH}/autobrr/config:/config
    ports:
      - 7474:7474
    networks:
      - proxy
      - starr

  #jellyseer - allows users to request media on their own
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/jellyseerr/config:/app/config
      - ${MEDIA_SHARE}:/data #Access to the entire ${BASE_PATH}
    networks:
      - proxy
      - starr
    ports:
      - 5055:5055
    restart: unless-stopped
    
  #Flaresolerr - Used as a proxy server to bypass Cloudflare and DDoS-GUARD protection.
  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    #image: ghcr.io/flaresolverr/flaresolverr:latest
    image: alexfozor/flaresolverr:pr-1300
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=debug
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=${TZ}
      - LANG=en_GB
    ports:
      - 8191:8191/tcp # flaresolverr
    restart: unless-stopped
    networks:
      - starr
      
  #Qbittorent - torrenting software
  #
  #You can also use RuTorrent, Transmisson or Deluge
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:gluetun"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8080
      - TORRENTING_PORT=8694 #Make sure to port forward this port in your router so you can seed more effectively
    volumes:
      - ${BASE_PATH}/qbittorent/config:/config
      - ${MEDIA_SHARE}/torrents:/data/torrents
    restart: unless-stopped

  #Tdarr - to transcode videos from one format to another like x265 or H.265
  #
  #This container requires a decent amount of horse power to run but will save space in the long run
  tdarr:
    container_name: tdarr
    image: ghcr.io/haveagitgat/tdarr:latest
    restart: unless-stopped
    ports:
      - 8265:8265 # webUI port
      - 8266:8266 # server port
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK_SET=002
      - nodeName=ServerNode
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
      - internalNode=true
      - inContainer=true
      - ffmpegVersion=6
    volumes:
      - ${BASE_PATH}/tdarr/server:/app/server
      - ${BASE_PATH}/tdarr/configs:/app/configs
      - ${BASE_PATH}/tdarr/logs:/app/logs
      - ${MEDIA_SHARE}/media:/data/media
      - /transcode_cache:/temp
    devices:
     - /dev/dri:/dev/dri #Required for HW transcoding /share QuickSync
      
  #Bazarr - for subtitles. Try to use SRT format if you can rather than PGS due to performance issues
  bazarr:
    container_name: bazarr
    image: lscr.io/linuxserver/bazarr:latest
    restart: unless-stopped
    environment:
      - PUID=${PGID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/bazarr/config:/config
      - ${MEDIA_SHARE}/media:/data/media
    ports:
      - 6767:6767
    networks:
      - starr
      
  #Cross Seed - used to take torrents from one tracker and seed them on another without leeching first. Increases ratio
  #
  #This is fairly advanced but can be removed if you don't think you will need it. Some trackers also don't allow this
  cross-seed:
    image: ghcr.io/cross-seed/cross-seed:latest
    container_name: cross-seed
    network_mode: "service:gluetun"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${BASE_PATH}/cross-seed/config:/config #To configure you have to manually nano the config file
      - ${BASE_PATH}/qbittorent/config/qBittorrent/BT_backup:/torrents:ro # your torrent clients .torrent cache, can and should be mounted read-only (e.g. qbit: `BT_Backup` | deluge: `state` | transmission: `transmission/torrents` | rtorrent: session dir from `.rtorrent.rc`)
      - ${MEDIA_SHARE}/cross-seed/current-cross-seeds:/data/cross-seeds # A place to temp save current cross seed .torrent files
      #- ${MEDIA_SHARE}/downloads:/data # OPTIONAL!!! this is dataDir path (for data-based matching) - will need to replicate your torrent client's container path (like Arr's do)
    command: daemon # this enables the search mode, change to daemon to specifically run the daemon
    
  #Wizarr - Allows you to create a share link that you can send to users to invite them to your media server
  wizarr:
    container_name: wizarr
    image: ghcr.io/wizarrrr/wizarr:latest
    ports:
      - 5690:5690
    volumes:
      - ${BASE_PATH}/wizarr/data/database:/data/database
    networks:
      - proxy
      - starr
      
  #Dozzle - Used to easily view logs of any container in real time!    
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080
    
  #Unpacker - Used to unzip zipped files
  unpackerr:
    image: golift/unpackerr:latest
    container_name: unpackerr

    volumes:
      # You need at least this one volume mapped so Unpackerr can find your files to extract.
      # Make sure this matches your Starr apps; the folder mount (/downloads or /data) should be identical.
      - ${MEDIA_SHARE}:/data
      #- ${BASE_PATH}/unpackerr/config:/config
    restart: always
    user: 1000:1000 #Needs to run as 1000
    # What you see below are defaults for this compose. You only need to modify things specific to your environment.
    # Remove apps and feature configs you do not use or need. 
    # ie. Remove all lines that begin with UN_CMDHOOK, UN_WEBHOOK, UN_FOLDER, UN_WEBSERVER, and other apps you do not use.
    environment:
      - UN_START_DELAY=1m
      #- UMASK=002
      - TZ=${TZ}
      #- UN_DEBUG=true
      # Sonarr Config
      - UN_SONARR_0_URL=http://sonarr:8989
      - UN_SONARR_0_API_KEY=${SONARR_KEY}
      #- UN_SONARR_0_PATHS_0=/${BASE_PATH}/downloads/shows
      - UN_SONARR_0_TIMEOUT=10s
      #- UN_SONARR_0_PATHS_0=/${BASE_PATH}/downloads/shows
      # Radarr Config
      - UN_RADARR_0_URL=http://radarr:7878
      - UN_RADARR_0_API_KEY=${RADARR_KEY}
      #- UN_RADARR_0_PATHS_0=/${BASE_PATH}/downloads/movies
      - UN_RADARR_0_TIMEOUT=10s
      #- UN_RADARR_0_PATHS_0=/${BASE_PATH}/downloads/movies
    networks:
      - starr

  cabernet:
    image: ghcr.io/cabernetwork/cabernet:latest
    container_name: cabernet
    network_mode: "service:gluetun"
    volumes:
      - ${BASE_PATH}/cabernet:/app/plugins_ext
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    environment:
      - VPN_SERVICE_PROVIDER=mullvad
      - VPN_TYPE=wireguard
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_KEY}
      - WIREGUARD_ADDRESSES=${WIREGUARD_ADD}
      - SERVER_CITIES=${VPN_SERVER_CITIES}
    ports:
      - 2648:2648/tcp # cross-seed
      - 8080:8080/tcp # qBit
      - 8694:8694/tcp # qBit
      - 5656:5656/tcp # kapowarr
      - 5004:5004 # cabernet
      - 6077:6077 # cabernet
    networks:
      - starr
      - proxy

